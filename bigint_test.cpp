#include "bigint.h"
#include <functional>
#include <stdexcept>
#include <gtest/gtest.h>

namespace
{

TEST(bigint, default_constructor)
{
	ASSERT_EQ(bigint(), bigint(0));
}

template <typename Ty>
void test_constructor_signed()
{
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(
		std::numeric_limits<Ty>::min()))), std::to_string(
		std::numeric_limits<Ty>::min()));
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(-1))), "-1");
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(0))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(1))), "1");
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(
		std::numeric_limits<Ty>::max()))), std::to_string(
		std::numeric_limits<Ty>::max()));
}

template <typename Ty>
void test_constructor_unsigned()
{
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(0))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(1))), "1");
	ASSERT_EQ(to_string(bigint(static_cast<Ty>(
		std::numeric_limits<Ty>::max()))), std::to_string(
		std::numeric_limits<Ty>::max()));
}

TEST(bigint, constructor_signed_char)
{
	test_constructor_signed<signed char>();
}

TEST(bigint, constructor_unsigned_char)
{
	test_constructor_unsigned<unsigned char>();
}

TEST(bigint, constructor_signed_short)
{
	test_constructor_signed<signed short>();
}

TEST(bigint, constructor_unsigned_short)
{
	test_constructor_unsigned<unsigned short>();
}

TEST(bigint, constructor_signed_int)
{
	test_constructor_signed<signed int>();
}

TEST(bigint, constructor_unsigned_int)
{
	test_constructor_unsigned<unsigned int>();
}

TEST(bigint, constructor_signed_long)
{
	test_constructor_signed<signed long>();
}

TEST(bigint, constructor_double)
{
	ASSERT_EQ(to_string(bigint(static_cast<double>(-1.5))), "-1");
	ASSERT_EQ(to_string(bigint(static_cast<double>(-0.5))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<double>(0.5))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<double>(1.5))), "1");

	ASSERT_EQ(to_string(bigint(static_cast<double>(-1.0))), "-1");
	ASSERT_EQ(to_string(bigint(static_cast<double>(0.0))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<double>(1.0))), "1");
}

template <typename Type>
void test_constructor_string()
{
	ASSERT_EQ(to_string(bigint(static_cast<Type>("0"))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<Type>("+0"))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<Type>("-0"))), "0");
	ASSERT_EQ(to_string(bigint(static_cast<Type>("1"))), "1");
	ASSERT_EQ(to_string(bigint(static_cast<Type>("+1"))), "1");
	ASSERT_EQ(to_string(bigint(static_cast<Type>("-1"))), "-1");
	ASSERT_EQ(to_string(bigint(static_cast<Type>(
		"127876529378264945812836824504374021737163935874303786213"))),
		"127876529378264945812836824504374021737163935874303786213");
	ASSERT_EQ(to_string(bigint(static_cast<Type>(
		"786761577491551790408176687496632718853305536601969668399"
		"239994005747534015496272031273540752052730348423643752237"
		"820346604852557769999289432205621414181613901934121199514"
		"357474515405755385969802339499361419684920442417657349498"
		"232569364002183501795693259883300012435956997446326853060"
		"826732509485637883404526774134993104579447628003178691327"
		"308071596528331624732536132823020760253257091501757570369"))),
		"786761577491551790408176687496632718853305536601969668399"
		"239994005747534015496272031273540752052730348423643752237"
		"820346604852557769999289432205621414181613901934121199514"
		"357474515405755385969802339499361419684920442417657349498"
		"232569364002183501795693259883300012435956997446326853060"
		"826732509485637883404526774134993104579447628003178691327"
		"308071596528331624732536132823020760253257091501757570369");
	ASSERT_EQ(to_string(bigint(static_cast<Type>(
		"-36163572211257251151110236520310613747400817337280894280"
		"185415046763278773155209951507191542154096574340311601996"
		"705562577987476428634568444577904588656804549104902341616"
		"771719039180372746927019475642541291156399456729675439913"
		"946448865326083054646861003813344769994124612690545604646"
		"163195326285036197002260591787104762594837625142424812048"
		"070618143311614235009133062581328121764052903171696179094"))),
		"-36163572211257251151110236520310613747400817337280894280"
		"185415046763278773155209951507191542154096574340311601996"
		"705562577987476428634568444577904588656804549104902341616"
		"771719039180372746927019475642541291156399456729675439913"
		"946448865326083054646861003813344769994124612690545604646"
		"163195326285036197002260591787104762594837625142424812048"
		"070618143311614235009133062581328121764052903171696179094");
	ASSERT_EQ(to_string(bigint(static_cast<Type>(
		"+66631934572455009868998517310742477890477485275734504926"
		"882827771106669481398467629461171851126680961637198089318"
		"688771608768834680618879461085194721348642391283446697156"
		"770772431283951891379566827601368386984118890753356921717"
		"141621059706026953705409871103078602616132606940730418791"
		"295228140022311579096400547260018728949920010867805370552"
		"713132327065261827531888357182132239918351800175975851681"))),
		"66631934572455009868998517310742477890477485275734504926"
		"882827771106669481398467629461171851126680961637198089318"
		"688771608768834680618879461085194721348642391283446697156"
		"770772431283951891379566827601368386984118890753356921717"
		"141621059706026953705409871103078602616132606940730418791"
		"295228140022311579096400547260018728949920010867805370552"
		"713132327065261827531888357182132239918351800175975851681");
}

TEST(bigint, constructor_char_ptr)
{
	test_constructor_string<const char *>();
}

TEST(bigint, constructor_std_string)
{
	test_constructor_string<std::string>();
}

TEST(bigint, DISABLED_copy_constructor)
{
}

template <typename Ty>
void test_assignment_operator(Ty value)
{
	bigint big;
	EXPECT_EQ((big = value), bigint(value));
	EXPECT_EQ(big, bigint(value));
}

TEST(bigint, assignment_operator_bigint)
{
	test_assignment_operator(bigint(0));
	test_assignment_operator(bigint(789));
	test_assignment_operator(bigint(-2054));
	test_assignment_operator(bigint(
		"3129253695386344165237916133952128560832166584280778230691777"
		"7303703108903510029332808333024015651678428227808258913134170"
		"4069685212748868125736304140018596949637361653424111277516844"
		"8153781632818018537248664383232306002954674189894923966395471"
		"0563873776289030865463911740766976163885369843829217699680376"
		"6461637364070483050386270825359730371365394922286359454218583"
		"5342944787689351921436860716410838"));
	test_assignment_operator(bigint(
		"-418739447137375826551269198462233437428105189908485551809938"
		"5491153348125257629418662999257825045778734137914385839444485"
		"8808694903243630281055784226550187057486243261449609473401539"
		"1144208952226849235901470717900253534450598740276953361484711"
		"0629849533472467597751116343798810770129263058723409499473491"
		"7785700351992465027659620418825746"));
}

TEST(bigint, compare)
{
	ASSERT_EQ(compare(bigint(-1), bigint(-1)),  0);
	ASSERT_EQ(compare(bigint(-1), bigint( 0)), -1);
	ASSERT_EQ(compare(bigint(-1), bigint( 1)), -1);
	ASSERT_EQ(compare(bigint( 0), bigint(-1)),  1);
	ASSERT_EQ(compare(bigint( 0), bigint( 0)),  0);
	ASSERT_EQ(compare(bigint( 0), bigint( 1)), -1);
	ASSERT_EQ(compare(bigint( 1), bigint(-1)),  1);
	ASSERT_EQ(compare(bigint( 1), bigint( 0)),  1);
	ASSERT_EQ(compare(bigint( 1), bigint( 1)),  0);

	ASSERT_EQ(compare(
		bigint("+716206353886580859817813420681310558036313926272339526"
			"919709982412753492790066243497114329023174092948183349"
			"350258717538056378657407342014846981606619835114510414"
			"991863220673449958899874553549065355347190279133977325"
			"998744843520546263213043432808472890796072061893811413"
			"042102792536056741793748330661676319471001163941375815"
			"896362435563867101031703930064021465881403648164774454"
			"2668127806606205217010"),
		bigint("+716206353886580859817813420681310558036313926272339526"
			"919709982412753492790066243497114329023174092948183349"
			"350258717538056378657407342014846981606619835114510414"
			"991863220673449958899874553549065355347190279133977325"
			"998744843520546263213043432808472890796072061893811413"
			"042102792536056741793748330661676319471001163941375815"
			"896362435563867101031703930064021465881403648164774454"
			"2668127806606205217010")), 0);
	ASSERT_EQ(compare(
		bigint("+460362967321104705453305280616190339617854955715708550"
			"005599562491695223459502296275040929846528783543306963"
			"470390743196781393047676687197630230619160606601426445"
			"795603094346393678530067752846976283606408497217297688"
			"384716816380542303179756674494447215293309071592756747"
			"004850349620495902507340241685508589258472449690707389"
			"091139822978215145872273448361376364749127782661222908"
			"7556059556694442897485"),
		bigint("+864973127771729960155420484645296829055237223007853437"
			"909844731210067425956128273482786940260228669800378667"
			"894192822234392394627565001295860275098622134948662326"
			"472720098513376919619753441556831124204534227459174308"
			"422542915071133139096080388466838245929673545906211331"
			"194194547382789553858304505940344620649659702948678124"
			"254157612532680859406129158646291242981805372854224879"
			"7459557520305535521881")), -1);
	ASSERT_EQ(compare(
		bigint("+488271345523437067969881822563465872317288909749399936"
			"450800513817445068649769980808797650764462339026351329"
			"667912350006808581584778821931204711171572596024116785"
			"002870468742461865784382443039999705630019886271231807"
			"539715615768509420906873344679907524578397813809827731"
			"767203123715459428974694422485676654710380546322549799"
			"193239694979542627125114734126910701194658369811312932"
			"1846552825746358424137"),
		bigint("+370056817775742317932146864158094115629234234186708075"
			"015859958487681710104084608559396471483860144111845818"
			"723703319091104294155564868332723484130563988877188814"
			"553045634902321709132451927810791321966551412992753617"
			"512036235542831472204560860189561018424832482143156541"
			"991128409151152989001020674048455615546181759044453260"
			"894656236311829234749690510558923226195013746297973264"
			"3420469020054293939261")), +1);
}

template <typename Ty1, typename Ty2, typename Ty3, typename Ty4>
void test_divmod(Ty1 value1, Ty2 value2, Ty3 expected1, Ty4 expected2)
{
	bigint a, b;
	divmod(bigint(value1), bigint(value2), &a, &b);
	EXPECT_EQ(a, bigint(expected1));
	EXPECT_EQ(b, bigint(expected2));
}

TEST(bigint, divmod)
{
	test_divmod(0, 1, 0, 0);
	test_divmod(1, 1, 1, 0);
	test_divmod(-1, 1, -1, 0);
	test_divmod(1, -1, -1, 0);
	test_divmod("63209104082147922191195786", "15809956", "3998056925784481765", "3743446");
	test_divmod("-152466211251883952931", "848247019", "-179742702111", "776804178");
}

TEST(bigint, DISABLED_divrem)
{
}

TEST(bigint, bool_type)
{
	ASSERT_FALSE(bigint(0));
	ASSERT_TRUE(bigint(1));
	ASSERT_TRUE(bigint(-1));
	ASSERT_TRUE(bigint("95729493604515250945710325196768108548869744938010"
		"4725659265347569143438842009738388756970334891247593403422947"
		"7911029097367979552893798720194233497773443066782910009805532"
		"2294587197037149630964034902497998906604185977187513198312794"
		"2872309735661243819744800284466977912223142896818999601234213"
		"4952748970881917984682956905606104649338139709746921313369564"
		"268723399826495629437222689752775921809291266"));
	ASSERT_TRUE(bigint("-9533937375406833648056943905364681746094867631441"
		"6400344782599499115752617811757104676637365869870237738994617"
		"1748152344166556351986713498557065694909039235883972671429577"
		"5044321400123714694881119971885729978424827963187649431403308"
		"9321634775476581041092193563000501475347020407037412931502658"
		"8553713447888701309068717141875633605178562531275638458078725"
		"2092386605852741552096637102714746609058006263"));
}

template <typename Ty1, typename Ty2>
void test_swap_method(Ty1 value1, Ty2 value2)
{
	bigint big1(value1);
	bigint big2(value2);
	big1.swap(big2);
	EXPECT_EQ(big1, bigint(value2));
	EXPECT_EQ(big2, bigint(value1));
	big1.swap(big2);
	EXPECT_EQ(big1, bigint(value1));
	EXPECT_EQ(big2, bigint(value2));
}

TEST(bigint, swap_method)
{
	test_swap_method("622762302244849521429", "79234696482666744418993849");
	test_swap_method("199825213360465201576901", "-17663619017345001643");
	test_swap_method(
		"-816683918420813538651996025171386860641742237103804297281155"
		"0508003944976032019044752732986596375616779815561257921718068"
		"1249160970853230041292913935361403722333257384058907097514788"
		"4073839468612225425759222500652613538002699578941309096075802"
		"4929293913346865195004522005863409514730470362074073508475012"
		"8102153544283360566409808159507611356732387669621563707006887"
		"44888424224692520095258547503830276",
		"+396732994411607881693065180136520339954915435873500780865880"
		"6376618296824113965314249665615119267495272397482159314929786"
		"8074741578092854801808209517774921852242474687458002642433836"
		"4470425604468657286445608948197912713697107628094613900877112"
		"6758433429434708585934425615045202349764442813041342994051007"
		"6783729621081000585290482175875244956672304291476877197706487"
		"17128580479189773159560612769910266");
}

TEST(bigint, sign)
{
	EXPECT_EQ(bigint( 0).sign(),  0);
	EXPECT_EQ(bigint(-1).sign(), -1);
	EXPECT_EQ(bigint(+1).sign(), +1);
	EXPECT_EQ(bigint("877793631480603230948925386").sign(), +1);
	EXPECT_EQ(bigint("-130065723777053202460575").sign(), -1);
	EXPECT_EQ(bigint(
		"+338185042190771372075171056754909251193847467341689428811040"
		"0672677001997805367011960780142211702952333118426639993992372"
		"3435999788323461015114581089213660617877443803839750339152840"
		"3681403670144101054893333795655172003193954816367110589740692"
		"7658711842525117159547206255304235015078219596325829011044981"
		"0281382412244053848428023851834933194811895340539207635193475"
		"04075042651121132793104046108545622").sign(), +1);
	EXPECT_EQ(bigint(
		"-338185042190771372075171056754909251193847467341689428811040"
		"0672677001997805367011960780142211702952333118426639993992372"
		"3435999788323461015114581089213660617877443803839750339152840"
		"3681403670144101054893333795655172003193954816367110589740692"
		"7658711842525117159547206255304235015078219596325829011044981"
		"0281382412244053848428023851834933194811895340539207635193475"
		"04075042651121132793104046108545622").sign(), -1);
}

TEST(bigint, operator_not)
{
	EXPECT_TRUE(! bigint( 0));
	EXPECT_FALSE(! bigint( 1));
	EXPECT_FALSE(! bigint(-1));
	EXPECT_FALSE(! bigint("455972148391194113807"));
	EXPECT_FALSE(! bigint("-1323615506822811567529"));
	EXPECT_FALSE(! bigint(
		"+266265189187564564812262634781073895076851559157523327526366"
		"7253433864264499839958381074476213807580520904149648396673094"
		"7625651526871784957507215845088449641607749043749262003386754"
		"8290645756664176134962992987956142641347091822258661485017964"
		"2544065784542959394419869320841720993644688105238126335633894"
		"5604140560656648285928869197561550841374628841016044751176715"
		"80835765086375912909541843677419249"));
	EXPECT_FALSE(! bigint(
		"-491697745692346354203657081269739129130842613455171037480824"
		"4341514386023197277934669906881684987200217040975951790580919"
		"2086839923443916837879561138932750005568562738791299515358970"
		"2279551102129273546756150239787422985978196964015630488381558"
		"6330751509145627673868153330304695007269680007069580421396407"
		"2664085113879264477768433785672910455023773755253574606893493"
		"89555348616884816608865352588467681"));
}

TEST(bigint, abs_method)
{
	EXPECT_EQ(bigint( 0).abs(), bigint("0"));
	EXPECT_EQ(bigint(-1).abs(), bigint("1"));
	EXPECT_EQ(bigint(+1).abs(), bigint("1"));
	EXPECT_EQ(bigint(
		"468267650526208884680330748").abs(),
		bigint("468267650526208884680330748"));
	EXPECT_EQ(bigint("-"
		"556256306301807371881562130043").abs(),
		bigint("556256306301807371881562130043"));
	EXPECT_EQ(bigint(
		"+226911865719623830377434273280208361772170696312231632058710"
		"9335144020331452260547306499726354741675067338698922835429099"
		"9991823799132978816997959327765812228873359014712511232157789"
		"9022997940312324151837914926498548600315210334059134927424362"
		"2180044882695971422677504812911151633492235757909384419070036"
		"8156680520421901247343525056364600047109086934221659941560204"
		"03027925551256838032293528147933113").abs(),
		bigint(
		"+226911865719623830377434273280208361772170696312231632058710"
		"9335144020331452260547306499726354741675067338698922835429099"
		"9991823799132978816997959327765812228873359014712511232157789"
		"9022997940312324151837914926498548600315210334059134927424362"
		"2180044882695971422677504812911151633492235757909384419070036"
		"8156680520421901247343525056364600047109086934221659941560204"
		"03027925551256838032293528147933113"));
	EXPECT_EQ(bigint(
		"-817205416686128784481878108131510416014167580293089303415895"
		"8171146782696425762240992830746058944170867576259617632838754"
		"4815722066420285147706663366605447109423522264711641870011209"
		"9562047008254344546853906763541435150751144221846561108837741"
		"3493421971274797060955788421175406121831031149724471010546265"
		"0565144410722339725626915308080278200715575484037791732529041"
		"84107000590814536489621401585444611").abs(),
		bigint(
		"+817205416686128784481878108131510416014167580293089303415895"
		"8171146782696425762240992830746058944170867576259617632838754"
		"4815722066420285147706663366605447109423522264711641870011209"
		"9562047008254344546853906763541435150751144221846561108837741"
		"3493421971274797060955788421175406121831031149724471010546265"
		"0565144410722339725626915308080278200715575484037791732529041"
		"84107000590814536489621401585444611"));
}

template <typename Ty>
void test_operator_pre_increment(Ty value, Ty expected)
{
	bigint big(value);
	EXPECT_EQ(++big, bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_pre_increment)
{
	test_operator_pre_increment(4575, 4576);
	test_operator_pre_increment(-64392, -64391);
	test_operator_pre_increment(-2, -1);
	test_operator_pre_increment(-1, 0);
	test_operator_pre_increment(0, 1);
	test_operator_pre_increment(1, 2);
	test_operator_pre_increment("505343580492536637241810", "505343580492536637241811");
	test_operator_pre_increment("-304183563962915012079", "-304183563962915012078");
	test_operator_pre_increment(
		"+730922643596972149353759234439394045761630757164960707516766"
		"2938045680333702188897919572649386987223828418361266989216755"
		"7963890351914167175401847379011414241415844282273950329221840"
		"4799022858354563192830807606197575792147450009990385249718656"
		"4511704674034264545444508400764223552392950297682069591296638"
		"0878396117642456257737610567032637516063173294243621855728729"
		"57437549745723143284250509458855206",
		"+730922643596972149353759234439394045761630757164960707516766"
		"2938045680333702188897919572649386987223828418361266989216755"
		"7963890351914167175401847379011414241415844282273950329221840"
		"4799022858354563192830807606197575792147450009990385249718656"
		"4511704674034264545444508400764223552392950297682069591296638"
		"0878396117642456257737610567032637516063173294243621855728729"
		"57437549745723143284250509458855207");
	test_operator_pre_increment(
		"-445855905927448348107824392016791774713623789091103546041782"
		"6550930315282910687948723084364115006909364529351994351536857"
		"6937156003765533128643284296452089695449665726950783381156201"
		"1417191136725971579085596443899232861283669970500349714498101"
		"4567022306418580634369672708151411144242530791982495772411743"
		"9396276046380769690752314809267409870874158502584141268167293"
		"36145112051445347996844999828775440",
		"-445855905927448348107824392016791774713623789091103546041782"
		"6550930315282910687948723084364115006909364529351994351536857"
		"6937156003765533128643284296452089695449665726950783381156201"
		"1417191136725971579085596443899232861283669970500349714498101"
		"4567022306418580634369672708151411144242530791982495772411743"
		"9396276046380769690752314809267409870874158502584141268167293"
		"36145112051445347996844999828775439");
}

template <typename Ty>
void test_operator_pre_decrement(Ty value, Ty expected)
{
	bigint big(value);
	EXPECT_EQ(--big, bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_pre_decrement)
{
	test_operator_pre_decrement(4575, 4574);
	test_operator_pre_decrement(-64392, -64393);
	test_operator_pre_decrement(2, 1);
	test_operator_pre_decrement(1, 0);
	test_operator_pre_decrement(0, -1);
	test_operator_pre_decrement(-1, -2);
	test_operator_pre_decrement("505343580492536637241810", "505343580492536637241809");
	test_operator_pre_decrement("-304183563962915012079", "-304183563962915012080");
	test_operator_pre_decrement(
		"-220830893293183460103990539591279728035353868168442926889078"
		"7516412592388927217328549460590461243739399003723910855639162"
		"1084732890182876802846708980205973702110993747011457007329214"
		"9206363183151831559489343810695699050716052189980728605626837"
		"7868186337064361221426088682296526171057315352963174535155894"
		"4713567587847520309209038274948627520156780084284062245738156"
		"54724659255909538325737961704354899",
		"-220830893293183460103990539591279728035353868168442926889078"
		"7516412592388927217328549460590461243739399003723910855639162"
		"1084732890182876802846708980205973702110993747011457007329214"
		"9206363183151831559489343810695699050716052189980728605626837"
		"7868186337064361221426088682296526171057315352963174535155894"
		"4713567587847520309209038274948627520156780084284062245738156"
		"54724659255909538325737961704354900");
	test_operator_pre_decrement(
		"+545387224899216411009079235081044317505724289216646913862523"
		"2669873663244999937200165520416394529624887918590685921098220"
		"2404572621121131040731319655311694960100460829403329886668008"
		"5427455499085741906974061861954029574463499640091604558462982"
		"2807551587841913131099578505483417755276274696679620502939298"
		"4024066228828012052443750485033583773388282025727986914712828"
		"78971362689260692805778504053546989",
		"+545387224899216411009079235081044317505724289216646913862523"
		"2669873663244999937200165520416394529624887918590685921098220"
		"2404572621121131040731319655311694960100460829403329886668008"
		"5427455499085741906974061861954029574463499640091604558462982"
		"2807551587841913131099578505483417755276274696679620502939298"
		"4024066228828012052443750485033583773388282025727986914712828"
		"78971362689260692805778504053546988");
}

template <typename Ty>
void test_operator_post_increment(Ty value, Ty expected)
{
	bigint big(value);
	EXPECT_EQ(big++, bigint(value));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_post_increment)
{
	test_operator_post_increment(4575, 4576);
	test_operator_post_increment(-64392, -64391);
	test_operator_post_increment(-2, -1);
	test_operator_post_increment(-1, 0);
	test_operator_post_increment(0, 1);
	test_operator_post_increment(1, 2);
	test_operator_post_increment("505343580492536637241811", "505343580492536637241812");
	test_operator_post_increment("-304183563962915012078", "-304183563962915012077");
	test_operator_post_increment(
		"+813407158387270834560751055921707865676884030387339525785066"
		"1900671848666640876391652355653307064394635380216728365102025"
		"4127234752340733671376893131756068016019868777613111264196762"
		"4282549365772949222934589880052539369961183397886803746237184"
		"4096364645037889796267739181455489170629770910502265394715800"
		"7967903679098389646539706886601338111843829588122139810752355"
		"07184617675014641435932411735507888",
		"+813407158387270834560751055921707865676884030387339525785066"
		"1900671848666640876391652355653307064394635380216728365102025"
		"4127234752340733671376893131756068016019868777613111264196762"
		"4282549365772949222934589880052539369961183397886803746237184"
		"4096364645037889796267739181455489170629770910502265394715800"
		"7967903679098389646539706886601338111843829588122139810752355"
		"07184617675014641435932411735507889");
	test_operator_post_increment(
		"-235495051655975843562752893711092468697506985869108895910582"
		"4572466197851167369997694597402296760480528088978236575173572"
		"9143488325188298165166618998789680313153416377863473276551748"
		"2058075024318340529366898916617880290522193703626674913385552"
		"6483907331478360906205996737567685014908122853086919395384389"
		"5145381100486626824652060402582647404344969619093533745225022"
		"18818098148901880455190728914068483",
		"-235495051655975843562752893711092468697506985869108895910582"
		"4572466197851167369997694597402296760480528088978236575173572"
		"9143488325188298165166618998789680313153416377863473276551748"
		"2058075024318340529366898916617880290522193703626674913385552"
		"6483907331478360906205996737567685014908122853086919395384389"
		"5145381100486626824652060402582647404344969619093533745225022"
		"18818098148901880455190728914068482");
}

template <typename Ty>
void test_operator_post_decrement(Ty value, Ty expected)
{
	bigint big(value);
	EXPECT_EQ(big--, bigint(value));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_post_decrement)
{
	test_operator_post_decrement(4575, 4574);
	test_operator_post_decrement(-64392, -64393);
	test_operator_post_decrement(2, 1);
	test_operator_post_decrement(1, 0);
	test_operator_post_decrement(0, -1);
	test_operator_post_decrement(-1, -2);
	test_operator_post_decrement("505343580492536637241809", "505343580492536637241808");
	test_operator_post_decrement("-304183563962915012080", "-304183563962915012081");
	test_operator_post_decrement(bigint(
		"+640788283623956252628688700675701177303998820909834044791998"
		"1406856290742332093235979666222546373070760912263664187063348"
		"2327612311826433497988467593894255856995618133957868646087855"
		"8789881157692924421236944466507607112264026019336355144214713"
		"3060178083498364410455879896217292698400978279320905227003778"
		"4033113990890867177791804700194349295372176126295403855913589"
		"64348875848547495827134886731753770"), bigint(
		"+640788283623956252628688700675701177303998820909834044791998"
		"1406856290742332093235979666222546373070760912263664187063348"
		"2327612311826433497988467593894255856995618133957868646087855"
		"8789881157692924421236944466507607112264026019336355144214713"
		"3060178083498364410455879896217292698400978279320905227003778"
		"4033113990890867177791804700194349295372176126295403855913589"
		"64348875848547495827134886731753769"));
	test_operator_post_decrement(bigint(
		"-513394583728176599726339039393783846436680311210179053376704"
		"9417366559064473964187507916998599888819687720629060362569147"
		"1837265038870225210797517134591601925773362063664528096799745"
		"5258628553635803186677394199306963263554805397976570822064873"
		"2356983980937385010491545277582653264304196079044887034669760"
		"4889046036170150634692141748805743924945908336090921394251790"
		"01989852693423975760734666622625611"), bigint(
		"-513394583728176599726339039393783846436680311210179053376704"
		"9417366559064473964187507916998599888819687720629060362569147"
		"1837265038870225210797517134591601925773362063664528096799745"
		"5258628553635803186677394199306963263554805397976570822064873"
		"2356983980937385010491545277582653264304196079044887034669760"
		"4889046036170150634692141748805743924945908336090921394251790"
		"01989852693423975760734666622625612"));
}

TEST(bigint, operator_negate)
{
	EXPECT_EQ(- bigint( 0), bigint( 0));
	EXPECT_EQ(- bigint( 1), bigint(-1));
	EXPECT_EQ(- bigint(-1), bigint( 1));
	EXPECT_EQ(- bigint(37592), bigint(-37592));
	EXPECT_EQ(- bigint(-4619), bigint(  4619));
	EXPECT_EQ(- bigint(
		"+322149941896793662634426968894626847708965089904877033316828"
		"2205531884476961057711776453325799547606724627939619169568458"
		"2766731871716657062864531428277500095030228650227113194599346"
		"0216535164284940793224360674808697864901947598282206690865277"
		"4410290321703423133596935864010457112805505771131405421151026"
		"3394931123705319442810415620531814576703687402541257927470896"
		"90338218472215615497313251284483690"), bigint(
		"-322149941896793662634426968894626847708965089904877033316828"
		"2205531884476961057711776453325799547606724627939619169568458"
		"2766731871716657062864531428277500095030228650227113194599346"
		"0216535164284940793224360674808697864901947598282206690865277"
		"4410290321703423133596935864010457112805505771131405421151026"
		"3394931123705319442810415620531814576703687402541257927470896"
		"90338218472215615497313251284483690"));
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_operator_add_assign(Ty1 value1, Ty2 value2, Ty3 expected)
{
	bigint big(value1);
	EXPECT_EQ((big += bigint(value2)), bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_add_assign)
{
	test_operator_add_assign(0, 0, 0);
	test_operator_add_assign(0, 865, 865);
	test_operator_add_assign(0, -1284, -1284);
	test_operator_add_assign(-200, 77, -123);
	test_operator_add_assign(
		"128772692004240068257865",
		"7773102511346888737945",
		"136545794515586956995810");
	test_operator_add_assign(
		"-207369404944086129831930026471048696902596836844532365823927"
		"1313738174050938322487553880176879424188828041736594102021524"
		"8951024356809615519728740310964159687146307982390241428405713"
		"8775848591575770797943411354737644872509999978839686158991469"
		"1720260290639374971747609015623000088474619667417196864007117"
		"7434343316652678215477183714378933096861914851134514409464243"
		"66150001589617688806573304369867765",
		"+351905743599043695031530426289712828843752262127943391356571"
		"0280630562997934261882503133319326979569998197199480246519712"
		"5904843876899941422831312211577735899949815764897639823532609"
		"3801070933091477869004150792043445432806424339833350688548480"
		"0202372471631729319005175897321150081153278753611487632860447"
		"2658916503610027503170158137865427010589438137859069986353804"
		"94969456450701852122985232901224681",
		"1445363386549575651996003998186641319411554252834110255326438"
		"9668923889469959393949492531424475553811701554628861444981876"
		"9538195200903259031025719006135762128035077825073983951268955"
		"0252223415157070710607394373058005602964243609936645295570108"
		"4821121809923543472575668816981499926786590861942907688533295"
		"2245731869573492876929744234864939137275232867245555768895612"
		"8819454861084163316411928531356916");
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_operator_sub_assign(Ty1 value1, Ty2 value2, Ty3 expected)
{
	bigint big(value1);
	EXPECT_EQ((big -= bigint(value2)), bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_sub_assign)
{
	test_operator_sub_assign(0, 0, 0);
	test_operator_sub_assign(0, 865, -865);
	test_operator_sub_assign(0, -1286, 1286);
	test_operator_sub_assign(
		"9214933804928146287299",
		"501665113355954500173443",
		"-492450179551026353886144");
	test_operator_sub_assign(
		"-370287494336824360534383103102271683098945262396922757105715"
		"9830107872715587002191847223671178913331909362245624613719101"
		"7922520344070070582365037141458009909943457826021074691012122"
		"9947180787115562854828046032698935107421092735761103286855747"
		"2415681401315340392408418189192023360655685380518724191129309"
		"8426839229096109776248979386553778136331013399786507970238674"
		"3994891470226855353615132459908111",
		"-719006460436598983776976130658088389299487916677723117446421"
		"3964810794452812270042601552309600232589121747250649292791851"
		"6263525199843008009529594830054010698423778668338753472449640"
		"4273835607016500486034662002137577542002968391038812980059327"
		"8652588743220125051612032808339704156256119520843693598317628"
		"5346483908094777117759955922567428138951665971756512771007841"
		"14482788862792699346009795314278089",
		"6819777110029165477235378203478612209895933904380308417358497"
		"9818000071812535698234168299424823412559308110260868314199414"
		"4712731654360009512930911159082097074294328857366460033484281"
		"2791175283049442005518573988676840312608591174627026513737531"
		"4110206030885910123711909894205018201905509827918211792046975"
		"5037999851851661401350579839120503253185646317778619739839737"
		"0487897392565843992394662854369978");
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_operator_mul_assign(Ty1 value1, Ty2 value2, Ty3 expected)
{
	bigint big(value1);
	EXPECT_EQ((big *= bigint(value2)), bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

TEST(bigint, operator_mul_assign)
{
	test_operator_mul_assign(-1, -1, 1);
	test_operator_mul_assign(-1, 0, 0);
	test_operator_mul_assign(-1, 1, -1);
	test_operator_mul_assign(0, -1, 0);
	test_operator_mul_assign(0, 0, 0);
	test_operator_mul_assign(0, 1, 0);
	test_operator_mul_assign(1, -1, -1);
	test_operator_mul_assign(1, 0, 0);
	test_operator_mul_assign(1, 1, 1);
	test_operator_mul_assign(409, 2, 818);
	test_operator_mul_assign(818, -56, -45808);
	test_operator_mul_assign(-45808, -1, 45808);
	test_operator_mul_assign(45808, 0, 0);
	test_operator_mul_assign(
		"5387241703157997895",
		"4234575746049986044",
		"22812683054301876392898745291731377380");
	test_operator_mul_assign(
		"+676360101418051814003497065640016200286837414828940487202414"
		"3812987403420096020629713691272553462823522291912794458125522"
		"1285701913106807502686258036777384633579231927882340865150779"
		"8891681342805297077539463541408031230129349241011648343260319"
		"9599305582358799575368264473788639162753709975690474626007679"
		"5016466483680321408884929821985143033113576482652832142077230"
		"26284513444099950166421366419115452",
		"+742519951426978089304313133485194487064986271448148572539661"
		"7656202589786815474120418624141048282897510847009067225657090"
		"7757660292566919190285975253040763034304569939894854765336150"
		"8500011228244460356197470730232417640477100570768958743116818"
		"0680409373044194171682119183538477952985084117993771740347581"
		"7371664556875612794349555060725751904030508323978396470522767"
		"0610610890239437526687674854406718",
		"5022108696520778072344889704807565118347615909147836236762237"
		"4119155567963727536108318512979339148671636996129434249331801"
		"9667230870585865746975528779153139107751164657034975936988555"
		"3675843210362258492955777420287831974821220840186568450375203"
		"5390574712965079744881283945790524937472926437586659172467311"
		"4955474907897181232666844741182134114451996329836968193682270"
		"9081850547953452530887450198185685082018594671182036196630712"
		"0119373481418823076721124137356518471669382571596001548005358"
		"4181997722437184520434492778849482075223071609678251133216315"
		"1419728724530837663048412312710560052905025830945924028683393"
		"0605137245074705360073612893983817411034098820205069148305572"
		"4864390073516972763421557074131832966510896296273919533521611"
		"3131813263107695739512769342657114538463295321784038570493806"
		"406536");
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_operator_div_assign(Ty1 value1, Ty2 value2, Ty3 expected)
{
	bigint big(value1);
	EXPECT_EQ((big /= bigint(value2)), bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

template <typename Ty1, typename Ty2>
void test_operator_div_assign_throws(Ty1 value1, Ty2 value2)
{
	bigint big1(value1);
	bigint big2(value2);
	EXPECT_THROW(big1 /= big2, std::invalid_argument);
	EXPECT_EQ(big1, bigint(value1));
}

TEST(bigint, operator_div_assign)
{
	test_operator_div_assign(-1, -1,  1);
	test_operator_div_assign(-1,  1, -1);
	test_operator_div_assign( 0, -1,  0);
	test_operator_div_assign( 0,  1,  0);
	test_operator_div_assign( 1, -1, -1);
	test_operator_div_assign( 1,  1,  1);

	test_operator_div_assign(
		"+613330771241040153583252391058842001789068496644175286781974"
		"9921590724004356993266664588618709017871176872944805534009166"
		"1704498969558138110602588120893720045409578377574350749530432"
		"6565857802919288572514181598501250689751736389216838087059998"
		"2466676530145947412019397068511438264872880133125305919743983"
		"7491368096641451180881090327064867659430379121585284423065069"
		"61344200896657198926622721490244217",
		"+432451004057739164034635018940615567945621372150823612754637"
		"6044192629573198284056070405064028614402854913510969288381170"
		"7200729998326004111918177988919212530961552357679692142584160"
		"75521641741239891",
		"+141826649836879701541659272149394529603822958347103719429980"
		"6427907536616377362863878661530366810962925401908143094075723"
		"5532361910074629040870836898435793542734526803942807277695890"
		"24709223983709001221");
	test_operator_div_assign(
		"-471441692131364880184411096927149297915949901635706176760420"
		"7824879242259323646216380929533988576164596703597844092667078"
		"0216616559816936932674068101758652176765538176991071748940498"
		"5986307916865847617286066991642079326266845708067878181771606"
		"5722660828065333490806502303816316646796237677034709246351510"
		"5422263364146166047361203618724423386705083896929682152039731"
		"73947648735867548914768795683658039",
		"+215944850424228000645463971705631537342392220369251027446133"
		"8044983824097693181506689093286156179589976996378780930882869"
		"6759725869348350891293454243480105206045406947050951887187608"
		"137999350970216682",
		"-218315783499911295291023462750397166186045296804725757077008"
		"9549466195789033683893804750772491339339063908746693073923672"
		"4299697415870649403673682695652396446286707573938358150646247"
		"4745054184599014729");
	test_operator_div_assign(
		"+394952370992276284627787788054064034219728893728779564265860"
		"9634013302081298127129017834146720525522154238842516415904503"
		"1609436228861510276870246047709887280703070770956398994125760"
		"6642832983904724023790701094606668976529538721414402375441299"
		"1249081638676756878970648097392536930914626572862449242863921"
		"4147785189911466642742143507204459170211335317452716023987301"
		"15346435620213794831899379730956802",
		"-364672718428091516654575941339185104175786320485562567981689"
		"5052595541403631179183752735482979826118383869518889283355563"
		"3571758444848791306623237795422096392377105452971880404481612"
		"619965126029929226",
		"-108303240421906006173897169526304398788171116561332501157751"
		"3759088314210924158446138247302921854026856551832779874216300"
		"1314278727258241895686489404728752692947310217280372533589195"
		"5054275192644314741");
	test_operator_div_assign(
		"-378521018582281233886026011095256324968968799844457490211802"
		"4644887515550159513601507661818782082934279025481938413583639"
		"0318509782727257548049935771884338313472000037889045929359254"
		"6580531183377253176066563364035570837460074221931270895285671"
		"8392751654435121980413977233819552243345649971207987074892810"
		"0358975033125583032860907591078121921588980767129709865210138"
		"3961092885004908764761579656748410",
		"-525208879557594694188226215175478163654929122189458789781736"
		"7842521147812700853687366231736256525750350009424096607871416"
		"8609275753401592252022613852482120089581881589483352211772740"
		"05535351289459279386943142332979811283",
		"+720705672191081855264902544703256053201382815032410137448438"
		"4544350799571863626835569203379314916375180196310512578997071"
		"6167312493232848831125509589731179496243266338024662941823");

	test_operator_div_assign_throws(-1, 0);
	test_operator_div_assign_throws(0, 0);
	test_operator_div_assign_throws(1, 0);
	test_operator_div_assign_throws(17, 0);
	test_operator_div_assign_throws("-3129189330992919828", 0);
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_operator_mod_assign(Ty1 value1, Ty2 value2, Ty3 expected)
{
	bigint big(value1);
	EXPECT_EQ((big %= bigint(value2)), bigint(expected));
	EXPECT_EQ(big, bigint(expected));
}

template <typename Ty1, typename Ty2>
void test_operator_mod_assign_throws(Ty1 value1, Ty2 value2)
{
	bigint big1(value1);
	bigint big2(value2);
	EXPECT_THROW(big1 %= big2, std::invalid_argument);
	EXPECT_EQ(big1, bigint(value1));
}

TEST(bigint, operator_mod_assign)
{
	test_operator_mod_assign(-1, -1, 0);
	test_operator_mod_assign(-1,  1, 0);
	test_operator_mod_assign( 0, -1, 0);
	test_operator_mod_assign( 0,  1, 0);
	test_operator_mod_assign( 1, -1, 0);
	test_operator_mod_assign( 1,  1, 0);

	test_operator_mod_assign(408, 312, 96);
	test_operator_mod_assign(96, -47, -45);
	test_operator_mod_assign(-45, -4, -1);
	test_operator_mod_assign("11378054977074907067072668151", "2161936083805573540397466", "1947304089979097501202059");
	test_operator_mod_assign("1947304089979097501202059", "-450756283772789437777", "-413812203125659432358");
	test_operator_mod_assign("-413812203125659432358", 10, 2);
	test_operator_mod_assign(2, 1, 0);

	test_operator_mod_assign(
		"-458798315069017701077656412679734187648596723171207796571592"
		"2299832504184844599339654817306369952291759924560996998227770"
		"0253455184446994719994304330222781898083729364355102297028319"
		"6402606908390844638914444784552220381583468922121401596847736"
		"5067932544901402132399281595693722422701687032661720377045144"
		"4203560014341201161208370131453704645932644304304250332700101"
		"35327661620838523647405478203748630",
		"-229291472855884151508355431632588266146273565456109678194449"
		"2787805345805869407311488336965402306786099132124291084633939"
		"1253455065185289372580126457646972154059276956737665443172130"
		"2181008198668188215",
		"-755522219398317572230740336164695169115132014935508618255363"
		"4707729567654235921344046362400178601200754759104131195620230"
		"6883539283804991877083115238481914567103064870565847649358377"
		"047899648741449585");
	test_operator_mod_assign(
		"-517240979661953768388282310584275282197175436880810560087381"
		"5868626332760850843995417429596304681280087332061346095612306"
		"9222984485746400811789890386549402621402004269214237778324737"
		"5119806536154815660297170976377571375330854588039164015977392"
		"1798620370385706861217628714617360686212623754857274518757621"
		"8018716122562086903824814907870737487043996834541361717329662"
		"95670484345795721073211932962561456",
		"+501893424707851713927362863449905591913862880101625277924909"
		"1655154187987628828198727356027430236785339890632279283765298"
		"8502298829747371946807347998967057378695449704221914807457747"
		"567374424709255",
		"3871682030149065348590404818995414339371481212785515060929025"
		"0588788929142061789717173208178739528709002227561138040152102"
		"9234637483160505085559499861576944437420549831113059486496574"
		"22645040327274");
	test_operator_mod_assign(
		"+417339480051451847084924503116908057215169662112096208295830"
		"3628755315902341715986472654498418644283954804626261458165793"
		"7274697436379158492828487468049047284258188799142251045804409"
		"9709788384736165782232704638944398624803857332051266715550658"
		"6321464641000597633961514226731518090757954351806784474199111"
		"1903373647426938100081374543955098858014031417565561304158650"
		"3006708477504760431757290297548044",
		"-902461827042120796908851134944766271043621180361442262828193"
		"3118403873519360804713320607920661585179240672204889740856042"
		"9779824938678385306367326382670543476795533268933839544124248"
		"45",
		"-577433531746705755922335695446897369701310660270930606077574"
		"8113319426586072424258244990770610177974749917444585871507290"
		"1494260292793528939946883125432601870029953531965337089543920"
		"1");
	test_operator_mod_assign(
		"+186327660562424853422695244250426684058097263102283557694472"
		"6336822576852828544001636586222708063599831980319442340265056"
		"0634258792080675157594436947028126514145059139108379789500539"
		"1267239951445196191534558094515857212266532694465451672496049"
		"3826676282226706603768957124925212609451075862172695212824757"
		"0977751997646305408365285602758368597503854279038229722181298"
		"9070282620579628405006732913178834",
		"+826152393835701062779408122738218004232498258590118036545762"
		"6143482849314020946426911124428296391431022268297723119578408"
		"2585497690098902589365711174990428234148309009156330071266854"
		"3000395821852741662882647960",
		"+540441684983986016906568392084183539250401999563404132753312"
		"1949560666122789822007845544553469370852173011747087752725439"
		"3892587869253523031398715542073855893239024239988513046793083"
		"9161188720164964385535754");

	test_operator_mod_assign_throws(0, 0);
	test_operator_mod_assign_throws(1, 0);
	test_operator_mod_assign_throws(-1, 0);
	test_operator_mod_assign_throws(-1, 0);
	test_operator_mod_assign_throws("-413812203125659432358", 0);
}

TEST(bigint, DISABLED_operator_unary_complement)
{
}

TEST(bigint, DISABLED_operator_and_assign)
{
}

TEST(bigint, DISABLED_operator_or_assign)
{
}

TEST(bigint, DISABLED_operator_xor_assign)
{
}

TEST(bigint, DISABLED_operator_shift_left_assign)
{
}

TEST(bigint, DISABLED_operator_shift_right_assign)
{
}

TEST(bigint, DISABLED_pow_method)
{
}

TEST(bigint, DISABLED_root_method)
{
}

TEST(bigint, DISABLED_root_method_with_remainder)
{
}

TEST(bigint, DISABLED_sqrt_method)
{
}

TEST(bigint, DISABLED_sqrt_method_with_remainder)
{
}

TEST(bigint, DISABLED_over)
{
}

TEST(bigint, str)
{
	EXPECT_EQ(bigint(0).str(), std::string("0"));
	EXPECT_EQ(bigint(1).str(), std::string("1"));
	EXPECT_EQ(bigint(-1).str(), std::string("-1"));
	EXPECT_EQ(bigint("566628460167679773101744509").str(),
		std::string("566628460167679773101744509"));
	EXPECT_EQ(bigint("-9735510015156850842820864").str(),
		std::string("-9735510015156850842820864"));

	/*
	EXPECT_EQ(bigint(0).str(2), std::string("0"));
	EXPECT_EQ(bigint(1).str(2), std::string("1"));
	EXPECT_EQ(bigint(-1).str(2), std::string("-1"));
	EXPECT_EQ(bigint("655108582497").str(2), std::string(
		"1001100010000111100000111010110001100001"));
	EXPECT_EQ(bigint("-52818805542").str(2), std::string(
		"-110001001100001111110000001100100110"));

	EXPECT_EQ(bigint(0).str(16), std::string("0"));
	EXPECT_EQ(bigint(1).str(16), std::string("1"));
	EXPECT_EQ(bigint(-1).str(16), std::string("-1"));
	EXPECT_EQ(bigint("41426178640617120746904773").str(16),
		std::string("224455a4dcf41e31ef1cc5"));
	EXPECT_EQ(bigint("-173339192475832163110").str(16),
		std::string("-96590852a970a1b26"));
	*/
}

template <typename Ty>
void test_stream_out(Ty value, const std::string& expected)
{
	std::ostringstream out;
	out << bigint(value);
	EXPECT_EQ(out.str(), expected);
}

template <typename Ty>
void test_stream_out(Ty value, const std::string& expected, std::function<void(std::ostream&)> func)
{
	std::ostringstream out;
	func(out);
	out << bigint(value);
	EXPECT_EQ(out.str(), expected);
}

TEST(bigint, stream_out)
{
	test_stream_out(0, "0");
	test_stream_out(1, "1");
	test_stream_out(-1, "-1");
	test_stream_out("9025431527864940004602540", "9025431527864940004602540");
	test_stream_out("-7579151606714069884174047679", "-7579151606714069884174047679");
	test_stream_out("8720193671706061402815049710", "7026454654253735406360610727756", [](std::ostream& out) {
		out.setf(std::ios_base::oct, std::ios_base::basefield);});
	test_stream_out("-79027921896895413180829914257", "-ff5a5d6661a5f70e9931d491", [](std::ostream& out) {
		out.setf(std::ios_base::hex, std::ios_base::basefield);});
	test_stream_out("409307427922996753487", "54301100621363701372117", [](std::ostream& out) {
		out << std::setbase(8); });
	test_stream_out("53205412372975608733", "2e25f98a8ab62639d", [](std::ostream& out) {
		out << std::setbase(16); });
	test_stream_out("42020325302495179214", "42020325302495179214", [](std::ostream& out) {
		out.setf(std::ios_base::dec, std::ios_base::basefield);
		out.setf(std::ios_base::showbase);
		});
	test_stream_out("578577278450842698409", "076565373225046657701251", [](std::ostream& out) {
		out.setf(std::ios_base::oct, std::ios_base::basefield);
		out.setf(std::ios_base::showbase);
		});
	test_stream_out("315988522812560247378", "0x112138bf51af120a52", [](std::ostream& out) {
		out.setf(std::ios_base::hex, std::ios_base::basefield);
		out.setf(std::ios_base::showbase);
		});
	test_stream_out("46923387673191783197036512", "+46923387673191783197036512", [](std::ostream& out) {
		out.setf(std::ios_base::dec, std::ios_base::basefield);
		out.unsetf(std::ios_base::showbase);
		out.setf(std::ios_base::showpos);
		});
	test_stream_out("-528956796008749460905221379", "-528956796008749460905221379");
	test_stream_out("288611625469533706046625617", "288611625469533706046625617   ", [](std::ostream& out) {
		out.unsetf(std::ios_base::showpos);
		out.setf(std::ios_base::left, std::ios_base::adjustfield);
		out.width(30);
		});
	test_stream_out("-6007685836038303431096721600", " -6007685836038303431096721600", [](std::ostream& out) {
		out.setf(std::ios_base::right, std::ios_base::adjustfield);
		out.width(30);
		});
	test_stream_out("60076858360383034310967216006046", "60076858360383034310967216006046", [](std::ostream& out) {
		out.setf(std::ios_base::left, std::ios_base::adjustfield);
		});
}

TEST(bigint, DISABLED_stream_operator_right_shift)
{
}

TEST(bigint, DISABLED_data)
{
}

TEST(bigint, DISABLED_debug)
{
}

template <typename Ty1, typename Ty2>
void test_swap_function(Ty1 value1, Ty2 value2)
{
	bigint big1(value1);
	bigint big2(value2);
	swap(big1, big2);
	EXPECT_EQ(big1, bigint(value2));
	EXPECT_EQ(big2, bigint(value1));
	swap(big1, big2);
	EXPECT_EQ(big1, bigint(value1));
	EXPECT_EQ(big2, bigint(value2));
}

TEST(bigint, DISABLED_swap_function)
{
	test_swap_function(
		"+409563064104237497650668440747458099830590508080338229939718"
		"9190772519529235766094890852402783466777515989849576157740926"
		"4932730015049633584983246836073162617735943706192896791643146"
		"4186225346908768163731417761890691010315776419139862916530239"
		"1428571417196263857854673482075584539551745767443054877283343"
		"5897844410826529841420353747223323600493403662799955353586321"
		"79462688899048279120942101981134035",
		"+415706301027412566201495978896839494817222005820133247284033"
		"3463294975943403230408227503166876430610219047672401070408771"
		"8288599182002105141347627584485747467068655671354418996779609"
		"3302250409383033766380789005802409467248245771299266697669897"
		"9846564581236235063111524108183683899322083695417143329477549"
		"1813406017960881854049623298893433485601082272234504826607838"
		"36904882525946559374721627394964310");
	test_swap_function(
		"-139573434972013519376747556405769520285880254880813311956497"
		"7459453413492538414580764729264995655746245878680170494410104"
		"9342046362488291135164187041810730520086765071282155698472915"
		"6641547108367237562343760021910574121784401944840168868266305"
		"7063706787584183320641091400901078763229131711428535121644455"
		"4957798791053188450973638944592436688517897254685086021375368"
		"03669544642765054221606886478143775",
		"+655926060596394921751301467451581457164169730459189100947881"
		"1271177335681190426943624133906728838328295981988165143326620"
		"0023317097754618989737630244273022401201894506808461686834364"
		"6762804836227267573686249972737754704128973231080170671720567"
		"7375341202033447634624233149465591344617981728538350903507012"
		"2647197430183558019668802335195124890405824519894110681427748"
		"74812429042888285244529878865969186");
}

TEST(bigint, operator_eq)
{
	ASSERT_TRUE(bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376")
		== bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376"));
	ASSERT_FALSE(bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376")
		== bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069377"));
	ASSERT_TRUE(bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687")
		== bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687"));
	ASSERT_FALSE(bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687")
		== bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878724453890251460734757169342241205412"
		"9660253025465599017813057913712714689148749798023318129018609"
		"598428457224346761348811535262706357979615712089951174655"));
}

TEST(bigint, operator_ne)
{
	ASSERT_FALSE(bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376")
		!= bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376"));
	ASSERT_TRUE(bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069376")
		!= bigint(
		"1071508607186267320948425049060001810561404811705533607443750"
		"3883703510511249361224931983788156958581275946729175531468251"
		"8714528569231404359845775746985748039345677748242309854210746"
		"0506237114187795418215304647498358194126739876755916554394607"
		"7062914571196477686542167660429831652624386837205668069377"));
	ASSERT_FALSE(bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687")
		!= bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687"));
	ASSERT_TRUE(bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878734928740196728388741211549271053730"
		"2531185570938977091076523237491790970633699383779582771973038"
		"531457285598238843271083830214915826312193418602834034687")
		!= bigint(
		"5357543035931336604742125245300009052807024058527668037218751"
		"9418517552556246806124659918940784792906379733645877657341259"
		"3572642846157021799228878724453890251460734757169342241205412"
		"9660253025465599017813057913712714689148749798023318129018609"
		"598428457224346761348811535262706357979615712089951174655"));
}

TEST(bigint, operator_lt)
{
	EXPECT_FALSE(bigint(-1) < bigint(-1));
	EXPECT_TRUE (bigint(-1) < bigint( 0));
	EXPECT_TRUE (bigint(-1) < bigint( 1));
	EXPECT_FALSE(bigint( 0) < bigint(-1));
	EXPECT_FALSE(bigint( 0) < bigint( 0));
	EXPECT_TRUE (bigint( 0) < bigint( 1));
	EXPECT_FALSE(bigint( 1) < bigint(-1));
	EXPECT_FALSE(bigint( 1) < bigint( 0));
	EXPECT_FALSE(bigint( 1) < bigint( 1));
}

TEST(bigint, operator_gt)
{
	EXPECT_FALSE(bigint(-1) > bigint(-1));
	EXPECT_FALSE(bigint(-1) > bigint( 0));
	EXPECT_FALSE(bigint(-1) > bigint( 1));
	EXPECT_TRUE (bigint( 0) > bigint(-1));
	EXPECT_FALSE(bigint( 0) > bigint( 0));
	EXPECT_FALSE(bigint( 0) > bigint( 1));
	EXPECT_TRUE (bigint( 1) > bigint(-1));
	EXPECT_TRUE (bigint( 1) > bigint( 0));
	EXPECT_FALSE(bigint( 1) > bigint( 1));
}

TEST(bigint, operator_le)
{
	EXPECT_TRUE (bigint(-1) <= bigint(-1));
	EXPECT_TRUE (bigint(-1) <= bigint( 0));
	EXPECT_TRUE (bigint(-1) <= bigint( 1));
	EXPECT_FALSE(bigint( 0) <= bigint(-1));
	EXPECT_TRUE (bigint( 0) <= bigint( 0));
	EXPECT_TRUE (bigint( 0) <= bigint( 1));
	EXPECT_FALSE(bigint( 1) <= bigint(-1));
	EXPECT_FALSE(bigint( 1) <= bigint( 0));
	EXPECT_TRUE (bigint( 1) <= bigint( 1));
}

TEST(bigint, operator_ge)
{
	EXPECT_TRUE (bigint(-1) >= bigint(-1));
	EXPECT_FALSE(bigint(-1) >= bigint( 0));
	EXPECT_FALSE(bigint(-1) >= bigint( 1));
	EXPECT_TRUE (bigint( 0) >= bigint(-1));
	EXPECT_TRUE (bigint( 0) >= bigint( 0));
	EXPECT_FALSE(bigint( 0) >= bigint( 1));
	EXPECT_TRUE (bigint( 1) >= bigint(-1));
	EXPECT_TRUE (bigint( 1) >= bigint( 0));
	EXPECT_TRUE (bigint( 1) >= bigint( 1));
}

TEST(bigint, operator_unary_plus)
{
	EXPECT_EQ(+ bigint( 0), bigint( 0));
	EXPECT_EQ(+ bigint( 1), bigint( 1));
	EXPECT_EQ(+ bigint(-1), bigint(-1));
	EXPECT_EQ(+ bigint(37592), bigint(37592));
	EXPECT_EQ(+ bigint(-4619), bigint(-4619));
	EXPECT_EQ(
		+ bigint("2054831835497650569818730926056260775329419235867658"
			"67059974943459759620226057547390163767547709493843631"
			"95622083515818642214821967520229276515121673902809029"
			"01386266543642400811575729584189461464083712979448529"
			"11386752300442657971703888065875428751067349656762250"
			"73937546592078868007400539788813407829304892849173820"
			"64820852470901815279176483383775690801533596568321965"
			"489648894287604959455318982578"),
		bigint("2054831835497650569818730926056260775329419235867658"
			"67059974943459759620226057547390163767547709493843631"
			"95622083515818642214821967520229276515121673902809029"
			"01386266543642400811575729584189461464083712979448529"
			"11386752300442657971703888065875428751067349656762250"
			"73937546592078868007400539788813407829304892849173820"
			"64820852470901815279176483383775690801533596568321965"
			"489648894287604959455318982578"));
	EXPECT_EQ(
		+ bigint("-870852671697987100673898268689402572448411313860524"
			"67399428499655130422539019185626414891926362693869339"
			"86546366730018422998709925610037815293996504018267598"
			"05637858354053384248903717427434808523419852468500108"
			"02246195138126581471986280844177644957314905320848207"
			"48928244623211885575170254057904987530090838903360169"
			"04059142744519519725025569834283316992773210441966164"
			"137059306204510410317936395743"),
		bigint("-870852671697987100673898268689402572448411313860524"
			"67399428499655130422539019185626414891926362693869339"
			"86546366730018422998709925610037815293996504018267598"
			"05637858354053384248903717427434808523419852468500108"
			"02246195138126581471986280844177644957314905320848207"
			"48928244623211885575170254057904987530090838903360169"
			"04059142744519519725025569834283316992773210441966164"
			"137059306204510410317936395743"));
}

TEST(bigint, operator_add)
{
	EXPECT_EQ(bigint(-1) + bigint(-1), bigint(-2));
	EXPECT_EQ(bigint(-1) + bigint(0), bigint(-1));
	EXPECT_EQ(bigint(-1) + bigint(1), bigint(0));
	EXPECT_EQ(bigint(-1) + bigint(2), bigint(1));
	EXPECT_EQ(bigint(0) + bigint(-1), bigint(-1));
	EXPECT_EQ(bigint(0) + bigint(0), bigint(0));
	EXPECT_EQ(bigint(0) + bigint(1), bigint(1));
	EXPECT_EQ(bigint(1) + bigint(-2), bigint(-1));
	EXPECT_EQ(bigint(1) + bigint(-1), bigint(0));
	EXPECT_EQ(bigint(1) + bigint(0), bigint(1));
	EXPECT_EQ(bigint(1) + bigint(1), bigint(2));
	EXPECT_EQ(bigint("8840587743209014991486176890") +
		bigint("-1"),
		bigint("8840587743209014991486176889"));
	EXPECT_EQ(bigint("499680576774082292410113726") +
		bigint("0"),
		bigint("499680576774082292410113726"));
	EXPECT_EQ(bigint("1673271581108184934182") +
		bigint("1"),
		bigint("1673271581108184934183"));
	EXPECT_EQ(bigint("8271324858169862655834") +
		bigint("74287305190053403856772"),
		bigint("82558630048223266512606"));
	EXPECT_EQ(bigint("-7096499840976817344578600") +
		bigint("13416290973509623768074"),
		bigint("-7083083550003307720810526"));
}

TEST(bigint, DISABLED_operator_sub)
{
}

TEST(bigint, DISABLED_operator_mul)
{
}

TEST(bigint, DISABLED_operator_div)
{
}

TEST(bigint, DISABLED_operator_mod)
{
}

TEST(bigint, DISABLED_operator_and)
{
}

TEST(bigint, DISABLED_operator_or)
{
}

TEST(bigint, DISABLED_operator_xor)
{
}

TEST(bigint, DISABLED_operator_left_shift)
{
}

TEST(bigint, DISABLED_operator_right_shift)
{
}

TEST(bigint, DISABLED_abs_function)
{
}

TEST(bigint, DISABLED_pow_function)
{
}

TEST(bigint, gcd)
{
	EXPECT_EQ(gcd(bigint(1), bigint(0)), bigint(1));
	EXPECT_EQ(gcd(bigint(1), bigint(1)), bigint(1));
	EXPECT_EQ(gcd(bigint(210), bigint(330)), bigint(30));
	EXPECT_EQ(gcd(
		bigint("518938558868350050997652513188374685487010378330847659"
		"9688823809000645127380561049505938405377683029534778276022465"
		"2885824396059685683200000000000000000"),
		bigint("897686613386912425751234555913455117377262494488224582"
		"5512193717906619269667918050723213585142468959840505895867028"
		"23456424265992193979501772800000000000000")),
		bigint("497969294380572396166614312102343030862634898283553082"
		"1765612707648080025184503253933017236139112621062225920000000"
		"0000000"));
}

TEST(bigint, lcm)
{
	EXPECT_EQ(lcm(bigint(0), bigint(0)), bigint(0));
	EXPECT_EQ(lcm(bigint(1), bigint(0)), bigint(0));
	EXPECT_EQ(lcm(bigint(1), bigint(1)), bigint(1));
	EXPECT_EQ(lcm(bigint(2), bigint(3)), bigint(6));
	EXPECT_EQ(lcm(bigint(210), bigint(330)), bigint(2310));
	EXPECT_EQ(lcm(
		bigint("518938558868350050997652513188374685487010378330847659"
		"9688823809000645127380561049505938405377683029534778276022465"
		"2885824396059685683200000000000000000"),
		bigint("897686613386912425751234555913455117377262494488224582"
		"5512193717906619269667918050723213585142468959840505895867028"
		"23456424265992193979501772800000000000000")),
		bigint("935487795579606992510080771957536867250032452594903457"
		"7216606783078103297283193203342628717112743587140067906135768"
		"7821693560413639755870960570390698235672997703586938880000000"
		"0000000000"));
}

TEST(bigint, fac)
{
	EXPECT_EQ(fac(0), bigint(1));
	EXPECT_EQ(fac(1), bigint(1));
	EXPECT_EQ(fac(2), bigint(2));
	EXPECT_EQ(fac(3), bigint(6));
	EXPECT_EQ(fac(4), bigint(24));
	EXPECT_EQ(fac(5), bigint(120));
	EXPECT_EQ(fac(100), bigint("933262154439441526816992388562667004907159"
		"6826438162146859296389521759999322991560894146397615651828625"
		"3697920827223758251185210916864000000000000000000000000"));
	EXPECT_EQ(fac(999), bigint(
		"4023872600770937735437024339230039857193748642107146325437999"
		"1042993851239862902059204420848696940480047998861019719605863"
		"1666872994808558901323829669944590997424504087073759918823627"
		"7271887325197795059509952761208749754624970436014182780946464"
		"9629105639388743788648733711918104582578364784997701247663288"
		"9835955735432513185323958463075557409114262417474349347553428"
		"6465766116677973966688202912073791438537195882498081268678383"
		"7455973174613608537953452422158659320192809087829730843139284"
		"4403281231558611036976801357304216168747609675871348312025478"
		"5893207671691324484262361314125087802080002616831510273418279"
		"7770478463586817016436502415369139828126481021309276124489635"
		"9928705114964975419909342221566832572080821333186116811553615"
		"8365469840467089756029009505376164758477284218896796462449451"
		"6076535340819890138544248798495995331910172335555660213945039"
		"9736280750137837615307127761926849034352625200015888535147331"
		"6117021039681759215109077880193931781141945452572238655414610"
		"6289218796022383897147608850627686296714667469756291123408243"
		"9208160153780889893964518263243671616762179168909779911903754"
		"0312746222899880051954444142820121873617459926429565817466283"
		"0295557029902432415318161721046583203678690611726015878352075"
		"1516284225540265170483304226143974286933061690897968482590125"
		"4583271682264580665267699586526822728070757813918581788896522"
		"0816434834482599326604336766017699961283186078838615027946595"
		"5131156552036093988180612138558600301435694527224206344631797"
		"4605946825731037900840244324384656572450144028218852524709351"
		"9062092902313649327349756551395872055965422874977401141334696"
		"2715422845862377387538230483865688976461927383814900140767310"
		"4466402598994902222217659043399018860185665264850617997023561"
		"9389701786004081188972991831102117122984590164192106888438712"
		"1855646124960798722908519296819372388642614839657382291123125"
		"0241866493531439701374285319266498753372189406942814341185201"
		"5801412334482801505139969429015348307764456909907315243327828"
		"8269864602789864321139083506217095002597389863554277196742822"
		"2487575867657523442202075736305694988250879689281627538488633"
		"9690995982628095612145099487170124451646126037902930912088908"
		"6942028510640182154399457156805941872748998094254742173582401"
		"0636774045957417851608292301353580818400969963725242305608559"
		"0370062427124341690900415369010593398383577793941097002775347"
		"2000000000000000000000000000000000000000000000000000000000000"
		"0000000000000000000000000000000000000000000000000000000000000"
		"0000000000000000000000000000000000000000000000000000000000000"
		"0000000000000000000000000000000000000000000000000000000000000"
		"000"));

}

TEST(bigint, DISABLED_n_over_k)
{
}

TEST(bigint, DISABLED_root_function)
{
}

TEST(bigint, DISABLED_root_function_with_remainder)
{
}

TEST(bigint, sqrt_function)
{
	EXPECT_EQ(sqrt(bigint(0)), bigint(0));
	EXPECT_EQ(sqrt(bigint(1)), bigint(1));
	EXPECT_EQ(sqrt(bigint(4)), bigint(2));
	EXPECT_EQ(sqrt(bigint("86130061254178817566759370650583127962006284015"
		"8366251793600259075900645504211019102061288741709972818830602"
		"7191393813121830136365582848878170577042264305483703923775096"
		"8687031797756262963890653695153428387848654273947443899013809"
		"8458435378729322399670315025760486553058411708629489019175783"
		"9756822638533802622988270979892916566575788155471631091892760"
		"8222394739421493120184893105618832576539818217476500227335932"
		"6920347257434300966714691228062730739698007564810578788138413"
		"3409941166665859993373476673085098280431548453955683700599052"
		"472854028781620885973985851343287306985664700123035904")),
		bigint("293479234792137921654921730725936490183072895739308108"
		"1947239874103892104792386489237302198302184923659817230821309"
		"2104723895692387321098321083932847923749237492375876109380146"
		"9438571039128492365327128358719737536282173091723875234873195"
		"4823714361987321973823436892317012738237647836739178921648"));
	EXPECT_EQ(sqrt(bigint("86130061254178817566759370650583127962006284015"
		"8366251793600259075900645504211019102061288741709972818830602"
		"7191393813121830136365582848878170577042264305483703923775096"
		"8687031797756262963890653695153428387848654273947443899013809"
		"8458435378729322399670315025760486553058411708629489019175783"
		"9756822638533802622988270979892916566575788155471631091892760"
		"8222394739421493120184893105618832576539818217476500227335932"
		"6920347257434300966714691228062730739698007564810578788138413"
		"3409941166665859993373476673085098280431548453955683700599052"
		"472854028781620885973985851343287306985664700123035903")),
		bigint("293479234792137921654921730725936490183072895739308108"
		"1947239874103892104792386489237302198302184923659817230821309"
		"2104723895692387321098321083932847923749237492375876109380146"
		"9438571039128492365327128358719737536282173091723875234873195"
		"4823714361987321973823436892317012738237647836739178921647"));
}

template <typename Ty1, typename Ty2, typename Ty3>
void test_sqrt_function_with_remainder(Ty1 big,
	Ty2 expected_sqrt, Ty3 expected_remainder)
{
	bigint rem;
	EXPECT_EQ(sqrt(bigint(big), rem), bigint(expected_sqrt));
	EXPECT_EQ(rem, bigint(expected_remainder));
}

TEST(bigint, sqrt_function_with_remainder)
{
	test_sqrt_function_with_remainder(0, 0, 0);
	test_sqrt_function_with_remainder(1, 1, 0);
	test_sqrt_function_with_remainder(6, 2, 2);
	test_sqrt_function_with_remainder(
		"8613006125417881756675937065058312796200628401583662517936002"
		"5907590064550421101910206128874170997281883060271913938131218"
		"3013636558284887817057704226430548370392377509686870317977562"
		"6296389065369515342838784865427394744389901380984584353787293"
		"2239967031502576048655305841170862948901917578397568226385338"
		"0262298827097989291656657578815547163109189276082223947394214"
		"9312018489310561883257653981821747650022733593269203472574343"
		"0096671469122806273073969800756481057878813841334099411666658"
		"5999337347667308509828043154845395568370059905247285402878162"
		"0885973985851343287306985664700123035904",
		"2934792347921379216549217307259364901830728957393081081947239"
		"8741038921047923864892373021983021849236598172308213092104723"
		"8956923873210983210839328479237492374923758761093801469438571"
		"0391284923653271283587197375362821730917238752348731954823714"
		"361987321973823436892317012738237647836739178921648", 0);
	test_sqrt_function_with_remainder(
		"8613006125417881756675937065058312796200628401583662517936002"
		"5907590064550421101910206128874170997281883060271913938131218"
		"3013636558284887817057704226430548370392377509686870317977562"
		"6296389065369515342838784865427394744389901380984584353787293"
		"2239967031502576048655305841170862948901917578397568226385338"
		"0262298827097989291656657578815547163109189276082223947394214"
		"9312018489310561883257653981821747650022733593269203472574343"
		"0096671469122806273073969800756481057878813841334099411666658"
		"5999337347667308509828043154845395568370059905247285402878162"
		"0885973985851343287306985664700123035903",
		"2934792347921379216549217307259364901830728957393081081947239"
		"8741038921047923864892373021983021849236598172308213092104723"
		"8956923873210983210839328479237492374923758761093801469438571"
		"0391284923653271283587197375362821730917238752348731954823714"
		"361987321973823436892317012738237647836739178921647",
		"5869584695842758433098434614518729803661457914786162163894479"
		"7482077842095847729784746043966043698473196344616426184209447"
		"7913847746421966421678656958474984749847517522187602938877142"
		"0782569847306542567174394750725643461834477504697463909647428"
		"723974643947646873784634025476475295673478357843294");
}

TEST(bigint, DISABLED_templated_operator_eq_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_eq_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_ne_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_ne_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_lt_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_lt_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_le_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_le_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_gt_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_gt_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_ge_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_ge_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_add_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_add_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_sub_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_sub_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_mul_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_mul_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_div_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_div_generic_bigint)
{
}

TEST(bigint, DISABLED_templated_operator_mod_bigint_generic)
{
}

TEST(bigint, DISABLED_templated_operator_mod_generic_bigint)
{
}

TEST(bigint, DISABLED_to_string)
{
}

}

